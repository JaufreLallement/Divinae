package cartes.cartes_action.cartes_action_effet.cartes_action_dogmatiques.croyants;

import java.util.ArrayList;

import origine.Origine;
import dogme.Dogme;

/**
 * 
 * @author Lallement
 * La classe CarteVampire decrit le comportement general des cartes Vampire
 */
public class CarteVampire extends CarteCroyant {
	
	/* ---------- Attributs ---------- */
	
	/* ---------- Constructeurs ---------- */
	/**
	 * Constructeur par défaut
	 */
	public CarteAlchimiste() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * Constructeur avec arguments
	 * @param {Dogme[]} dogmes : dogmes a attribuer a la carte
	 */
	public CarteAlchimiste(Dogme[] dogmes) {
		super(Origine.NUIT, dogmes, 2);
	}
	

	/* ---------- Getters & Setters ---------- */
	
	/* ---------- Méthodes ---------- */
	/**
	 * Implementation de la méthode appliquerEffet
	 * @see effet.Effet#appliquerEffet()
	 */
	@Override
	public void appliquerEffet() {
		// TODO Appliquer l'effet correspondant à la carte
	}
	
	/**
	 * Methode retournant toutes les cartes ermites
	 * @return {ArrayList<CarteAlchimiste>} divinites : retourne un ArrayList contenant tous les alchimistes
	 */
	public static ArrayList<CarteAlchimiste> getAllAlchimistes() {
		ArrayList<CarteAlchimiste> alchimistes = new ArrayList<CarteAlchimiste>();
		alchimistes.add(new CarteAlchimiste(new Dogme[] {Dogme.SYMBOLES, Dogme.NATURE, Dogme.CHAOS}));
		alchimistes.add(new CarteAlchimiste(new Dogme[] {Dogme.MYSTIQUES, Dogme.NATURE, Dogme.CHAOS}));
		alchimistes.add(new CarteAlchimiste(new Dogme[] {Dogme.SYMBOLES, Dogme.NATURE, Dogme.CHAOS}));
		return alchimistes;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
