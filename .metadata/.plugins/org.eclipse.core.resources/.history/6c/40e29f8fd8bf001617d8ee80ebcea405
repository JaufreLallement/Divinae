/**
 * 
 */
package partie;

import java.util.ArrayList;

import cartes.cartes_action.CarteAction;
import cartes.divinites.Divinite;
import joueur.Joueur;

/**
 * @author Lallement
 * La classe Partie décrit le comportement d'une partie. Il s'agit de la classe principale du programme
 * La classe sera chargée de lancer un nouvelle partie sur demande.
 */
public class Partie implements Runnable {
	/* ---------- Attributs ---------- */
	/**
	 * Joueurs participant à la partie
	 */
	private ArrayList<Joueur> participants;
	
	/**
	 * Pioche de la partie.
	 */
	private ArrayList<CarteAction> pioche = CarteAction.getAllCartesAction();
	
	/**
	 * Cimetiere de la partie
	 */
	private ArrayList<CarteAction> cimetiere = null;
	
	/**
	 * Divinites que les joueurs peuvent incarner
	 */
	private ArrayList<Divinite> piocheDivinites = Divinite.getAllDivinites();
	
	/**
	 * Gagnant de la partie
	 */
	private Joueur gagnant = null;
	
	/**
	 * Tours de la partie
	 */
	private ArrayList<Tour> tours = null;
	
	/* ---------- Constructeurs ---------- */
	/**
	 * Constructeur avec argument
	 * @param {int} nbJoueurs : nombre de participants souhaite
	 * @throws NumberOfPlayersException 
	 */
	public Partie(int nbJoueurs) throws NumberOfPlayersException {
		if (nbJoueurs > 6 || nbJoueurs < 2) {
			throw new NumberOfPlayersException();
		} else {
			this.participants = Joueur.getSixParticipants(nbJoueurs);
		}
	} 

	/* ---------- Getters & Setters ---------- */	
	/**
	 * Accesseur pour l'attribut participants
	 * @return {ArrayList<Joueur>} participants : retourne un ArrayList contenant les participants de la partie
	 */
	public ArrayList<Joueur> getParticipants() {
		return this.participants;
	}

	/**
	 * @param participants the participants to set
	 */
	public void setParticipants(ArrayList<Joueur> participants) {
		this.participants = participants;
	}

	/**
	 * Accesseur pour l'attribut pioche
	 * @return {ArrayList<CarteAction>} pioche : retourne un ArrayList contenant les cartes actions de la pioche
	 */
	public ArrayList<CarteAction> getPioche() {
		return this.pioche;
	}

	/**
	 * @param pioche the pioche to set
	 */
	public void setPioche(ArrayList<CarteAction> pioche) {
		this.pioche = pioche;
	}

	/**
	 * Accesseur pour l'attribut cimetiere
	 * @return {ArrayList<CarteAction>} cimetiere : retourne un ArrayList contenant les cartes ayant ete defaussee
	 */
	public ArrayList<CarteAction> getCimetiere() {
		return this.cimetiere;
	}

	/**
	 * @param cimetiere the cimetiere to set
	 */
	public void setCimetiere(ArrayList<CarteAction> cimetiere) {
		this.cimetiere = cimetiere;
	}

	/**
	 * Accesseur pour l'attribut piocheDivinites
	 * @return the piocheDivinites
	 */
	public ArrayList<Divinite> getPiocheDivinites() {
		return this.piocheDivinites;
	}

	/**
	 * @param piocheDivinites the piocheDivinites to set
	 */
	public void setPiocheDivinites(ArrayList<Divinite> piocheDivinites) {
		this.piocheDivinites = piocheDivinites;
	}

	/**
	 * Accesseur pour l'attribut gagnant
	 * @return the gagnant
	 */
	public Joueur getGagnant() {
		return this.gagnant;
	}

	/**
	 * @param gagnant the gagnant to set
	 */
	public void setGagnant(Joueur gagnant) {
		this.gagnant = gagnant;
	}

	/**
	 * Accesseur pour l'attribut tours
	 * @return the tours
	 */
	public ArrayList<Tour> getTours() {
		return this.tours;
	}

	/**
	 * @param tours the tours to set
	 */
	public void setTours(ArrayList<Tour> tours) {
		this.tours = tours;
	}

	/* ---------- Méthodes ---------- */
	/**
	 * Implémentation de la méthode run
	 * @see Runnable#run()
	 */
	@Override
	public void run() {
		// TODO Auto-generated method stub
		
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
}
