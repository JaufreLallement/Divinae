package cartes.cartes_action.cartes_action_effet.cartes_action_dogmatiques.croyants;

import java.util.ArrayList;
import java.util.Arrays;

import joueur.Joueur;
import cartes.cartes_action.CarteAction;
import cartes.divinites.Divinite;
import origine.Origine;
import dogme.Dogme;
import effets.Effet;

/**
 * 
 * @author Lallement
 * La classe CarteTravailleurs decrit le comportement general des cartes Travailleurs
 */
public class CarteTravailleur extends CarteCroyant implements Effet {

	/* ---------- Attributs ---------- */
	
	/* ---------- Constructeurs ---------- */
	/**
	 * Constructeur avec arguments
	 * @param {Dogme[]} dogmes : dogmes a attribuer a la carte
	 */
	public CarteTravailleur(Dogme[] dogmes) {
		super(Origine.JOUR, dogmes, 2, "Travailleur");
	}
	

	/* ---------- Getters & Setters ---------- */
	
	/* ---------- Méthodes ---------- */
	/**
	 * Implémentation de la méthode appliquerEffet
	 * @see effet.Effet#appliquerEffet()
	 */
	@Override
	public void appliquerEffet() {
		if (this.getDogmes() == new Dogme[]{Dogme.SYMBOLES, Dogme.HUMAIN, Dogme.CHAOS}) {
			for (Joueur joueur : this.getJoueur().getPartie().getParticipants()) {
				if (joueur != this.getJoueur()) {
					Dogme[] joueurDogmeDiv = joueur.getDiviniteIncarnee().getDogmesDivinite(); 
					if (Arrays.asList(joueurDogmeDiv).contains(Dogme.NATURE) || Arrays.asList(joueurDogmeDiv).contains(Dogme.MYSTIQUES)) {
						for (CarteAction ca : joueur.getJeu()) {
							if (ca.getClass().getName() == "CarteCroyant") {
								((CarteCroyant)ca).setEstSacrifiable();
							}
						}
					}
				}
			}
		}
	}
	
	/**
	 * Methode retournant toutes les cartes travailleurs
	 * @return {ArrayList<CarteTravailleurs>} divinites : retourne un ArrayList contenant tous les travailleurs
	 */
	public static ArrayList<CarteTravailleur> getAllTravailleurs() {
		ArrayList<CarteTravailleur> travailleurs = new ArrayList<CarteTravailleur>();
		travailleurs.add(new CarteTravailleur(new Dogme[] {Dogme.SYMBOLES, Dogme.HUMAIN, Dogme.CHAOS}));
		travailleurs.add(new CarteTravailleur(new Dogme[] {Dogme.HUMAIN, Dogme.NATURE, Dogme.SYMBOLES}));
		travailleurs.add(new CarteTravailleur(new Dogme[] {Dogme.MYSTIQUES, Dogme.HUMAIN, Dogme.CHAOS}));
		return travailleurs;
	}

	/**
	 * Methode de tests
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
	}
}
