/**
 * 
 */
package cartes;

import java.util.ArrayList;

import cartes.cartes_action.cartes_action_effet.cartes_action_dogmatiques.CarteActionDogmatique;
import cartes.divinites.Divinite;
import effets.Effet;
import joueur.Joueur;
import origine.Origine;

/**
 * @author Lallement
 * La classe De est la classe regroupant tous les types de cartes.
 * Cette classe est abstraite.
 */
public abstract class Carte {
	
	/* ---------- Attributs ---------- */
	/**
	 * Origine de la carte
	 */
	private Origine origineCarte = null;
	
	/**
	 * Joueur possédant la carte divinité donnée
	 */
	private Joueur joueur = null;
	
	/**
	 * Intitulé de la carte
	 */
	private String intituleCarte;
	
	/**
	 * True si un carte peut être sacrifiee
	 * False sinon
	 */
	private boolean sacrifiable = true;
	
	/**
	 * Effet de la carte
	 */
	private Effet effet;

	/* ---------- Constructeurs ---------- */
	
	/**
	 * Constructeur par défaut
	 */
	public Carte() {}
	
	/**
	 * Constructeur avec argument
	 * @param {Origine} origine : origine de la carte nouvellement creee
	 */
	public Carte(Origine origine) {
		this.origineCarte = origine;
	}


	/* ---------- Getters & Setters ---------- */
	/**
	 * Accesseur pour l'attribut origineCarte
	 * @return {Origine} origineCarte : retourne l'origine de la carte
	 */
	public Origine getOrigineCarte() {
		return this.origineCarte;
	}

	/**
	 * Modificateur pour l'attribut origineCarte
	 * @param {Origine} origine : origine à attribuer à la carte
	 */
	public void setOrigineCarte(Origine origine) {
		this.origineCarte = origine;
	}
	
	/**
	 * Accesseur pour l'attribut joueur
	 * @return {Joueur} joueur : retourne le joueur possédant la divinité
	 */
	public Joueur getJoueur() {
		return this.joueur;
	}

	/**
	 * Modificateur pour l'attribut joueur
	 * @param {Joueur} joueur : joueur nouveau joueur possédant la carte Divinité donnée.
	 */
	public void setJoueur(Joueur joueur) {
		this.joueur = joueur;
	}
	
	/**
	 * Accesseur pour l'attribut intituleCarte
	 * @return {String} intituleCarte : retourne l'intitullé de la carte
	 */
	public String getIntituleCarte() {
		return this.intituleCarte;
	}

	/**
	 * Modificateur pour l'attribut intituleCarte
	 * @param {String} intituleCarte : nouvel intuitulé pour la carte
	 */
	public void setIntituleCarte(String intituleCarte) {
		this.intituleCarte = intituleCarte;
	}
	
	/**
	 * Accesseur pour l'attribut sacrifiable 
	 * @return {boolean} isSacrifiable : true si la carte est sacrifiable, false sinon
	 */
	public boolean isSacrifiable() {
		return this.sacrifiable;
	}

	/**
	 * Modificateur pour l'attribut sacrifiable
	 */
	public void setSacrifiable() {
		this.sacrifiable = (this.sacrifiable) ? false : true;
	}

	/**
	 * Accesseur pour l'attribut effet
	 * @return {Effet} effet : effet de la carte
	 */
	public Effet getEffet() {
		return this.effet;
	}

	/**
	 * Modificateur pour l'attribut effet
	 * @param {Effet} effet : effet a attribuer a la carte
	 */
	public void setEffet(Effet effet) {
		this.effet = effet;
	}

	/* ---------- Méthodes ---------- */
	/**
	 * Methode permettant de sacrifier une carte
	 */
	public void sacrifier() {
		if (this.sacrifiable) {
			this.effet.appliquerEffet();
			this.defausser();
		}
	}
	
	/**
	 * Méthode permettant de défausser une carte
	 */
	public void defausser() {
		this.joueur.getPartie().getCimetiere().add(this);
		this.joueur.getJeu().remove(this);
	}
	
	/**
	 * Méthode retournant toutes les cartes
	 * @return {ArrayList<Carte>} cartes : retourne un ArrayList contenant toutes les cartes 
	 */
	public static ArrayList<Carte> getAll() {
		ArrayList<Carte> cartes = new ArrayList<Carte>();
		cartes.addAll(Divinite.getAll());
		cartes.addAll(CarteActionDogmatique.getAll());
		return cartes;
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		/* Tests de la méthode getAllCartes */
		ArrayList<Carte> testCartes = Carte.getAll();
		System.out.println(testCartes.size());
	}

}
