/**
 * 
 */
package cartes;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

import org.omg.CORBA.INTERNAL;

import dogme.Dogme;
import effets.Capacite;
import origine.Origine;

/**
 * @author Lallement
 *
 */
public class Divinite extends Carte {
	
	/* ---------- Attributs ---------- */
	/**
	 * Nom de la divinité
	 */
	private String nomDivinite;
	
	/**
	 * Tableau contenant les trois dogmes d'une divinité
	 */
	private Dogme[] dogmesDivinite;
	
	/**
	 * Disponibilite de la capacite de la divinite
	 */
	private boolean capaciteDispo = true;
	
	/**
	 * Capacite unique de la divinité
	 */
	private Capacite capaciteDivinite;
	
	/**
	 * Nombre total de prieres rassemblées par la divinité.
	 */
	private int totalPrieres = 0;
	
	
	/* ---------- Constructeurs ---------- */
	/**
	 * On supprime le constructeur publique par défaut
	 * afin d'éviter la création d'objets sans informations permettant leur identification   
	 */
	private Divinite() {
		super();
	}
	
	/**
	 * Constructeur avec arguments
	 * @param {String} nom : nom à attribuer à la divinite
	 * @param {Origine} origine : Origine de la divinité nouvellement créée
	 * @param {Capacite} capacite : Capacite unique à attribuer à la Divinite
	 * @param {Dogme[]} dogmes : tableau de dogmes à attribuer à la divinite
	 */
	public Divinite(String nom, Origine origine, Capacite capacite, Dogme[] dogmes) {
		super(origine);
		this.nomDivinite = nom;
		this.capaciteDivinite = capacite;
		this.dogmesDivinite = dogmes;
	}
	

	/* ---------- Getters & Setters ---------- */
	/**
	 * Accesseur pour l'attribut nomDivinite
	 * @return {String} nomDivinite : retourne le nom de la divinité
	 */
	public String getNomDivinite() {
		return this.nomDivinite;
	}

	/**
	 * Modificateur pour l'attribut nomDivinite
	 * @param {String} nom : nouveau nom à attribuer à la divinite   
	 */
	public void setNomDivinite(String nom) {
		this.nomDivinite = nom;
	}

	/**
	 * Accesseur pour l'attribut dogmesDivinite
	 * @return {Dogme[]} dogmesDivinite : tableau des dogmes de la divinité
	 */
	public Dogme[] getDogmesDivinite() {
		return this.dogmesDivinite;
	}

	/**
	 * Modificateur pour l'attribut dogmesDivinite
	 * @param {Dogme[]} dogmes : tableau de dogmes à attribuer à la divinité 
	 */
	public void setDogmesDivinite(Dogme[] dogmes) {
		this.dogmesDivinite = dogmes;
	}

	/**
	 * Accesseur pour l'attribut capaciteDispo
	 * @return {boolean} capaciteDispo : retourne la valeur de l'attribut capaciteDispo. True si la capacité est disponible, false sinon
	 */
	public boolean isCapaciteDispo() {
		return this.capaciteDispo;
	}

	/**
	 * Modificateur pour l'attribut capaciteDispo
	 * Si la capacité est disponible au temps tn-1, elle devient indisponible au temps tn
	 * Si la capacité est indisponible au temps tn-1, elle devient disponible au temps tn
	 */
	public void setCapaciteDispo() {
		this.capaciteDispo = (this.capaciteDispo) ? false : true;
	}

	/**
	 * Accesseur pour l'attribut capaciteDivinite
	 * @return {Capacite} capaciteDivinite : retourne la capacite unique de la divinite
	 */
	public Capacite getCapaciteDivinite() {
		return this.capaciteDivinite;
	}

	/**
	 * Modificateur pour l'attribut capaciteDivinite
	 * @param {Capacite} capacite : capacité à attribuer à la divinité
	 */
	public void setCapaciteDivinite(Capacite capacite) {
		this.capaciteDivinite = capacite;
	}

	/**
	 * Accesseur pour l'attribut totalPrieres
	 * @return {int} totalPrieres : retourne le nombre de prières obtenues par la divinité
	 */
	public int getTotalPrieres() {
		return this.totalPrieres;
	}

	/**
	 * Modificateur pour l'attribut capaciteDivinite
	 * @param {int} prieres : nombre de prière à attribuer à la divinité
	 */
	public void setTotalPrieres(int nbPrieres) {
		this.totalPrieres = nbPrieres;
	}
	
	
	/* ---------- Méthodes ---------- */
	/**
	 * Méthode retournant toutes les divinites
	 * @return {ArrayList<Divinite>} divinites : retourne un ArrayList contenant toutes les divinites
	 */
	@Override
	public ArrayList<Carte> getAll() {
		ArrayList<Carte> divinites = new ArrayList<Carte>();
		// TODO Utilisation d'un FileReader
		BufferedReader file;
		try {
			file = new BufferedReader(new FileReader("divinites.txt"));
			
			try {
				String nom;
				Capacite cap;
				Origine origine;
				
				while(file.ready()) {
					int nbLignes = Integer.valueOf(file.readLine()); 
					
					for (int i = 0; i < nbLignes; i++) {
						String ligne = file.readLine();
						int nextVal = ligne.indexOf(' ');
						
					}
				}
				
				file.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}		
		return divinites;
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
