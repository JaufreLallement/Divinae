package cartes.cartes_action.cartes_action_effet.cartes_action_dogmatiques.croyants;

import origine.Origine;
import dogme.Dogme;

/**
 * 
 * @author Lallement
 * La classe CartePillard decrit le comportement de la carte Pillards
 */
public class CartePillard extends CarteCroyant {

	/* ---------- Attributs ---------- */
	
	/* ---------- Constructeurs ---------- */
	/**
	 * On supprime le constructeur publique par défaut.
	 */
	private CartePillard() {}

	/**
	 * Constructeur privé avec arguments
	 * La classe étant un singleton, on évite la création de plusieurs instances 
	 */
	private CartePillard(Dogme[] dogmes) {
		super(Origine.NUIT, dogmes, 4);
		
	}
	
	/* ---------- Holder ---------- */
	/**
	 * @author Lallement
	 * Classe interne privée, responsable de l'instanciation de l'instance unique du Singleton.
	 */
	private static class CartePillardHolder {
		/**
		 * Unique instance de la classe non preinitialisee
		 */
		private final static CartePillard instance = new CartePillard(new Dogme[]{Dogme.MYSTIQUES, Dogme.NATURE, Dogme.SYMBOLES});
	}
	
	/* ---------- Getters & Setters ---------- */
	/**
	 * Méthode permettant de retourner une unique instance de la classe CarteLycanthrope
	 * @return {CarteLycanthrope} instance : retourtne l'instance de la classe CarteLycanthrope
	 */
	public final static CarteLycanthrope getInstance() {
		return CarteLycanthropeHolder.instance;
	}
	
	/* ---------- Méthodes ---------- */ 	
	/**
	 * Implémentation de la méthode appliquerEffet
	 */
	@Override
	public void appliquerEffet() {
		// TODO application de l'effet correspondant à la classe.
	}
	
	/**
	 * Methode de tests
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
	}
}
