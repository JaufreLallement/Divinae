/**
 * 
 */
package partie;

import java.util.ArrayList;
import java.util.Random;

import cartes.Carte;
import cartes.cartes_action.CarteAction;
import cartes.cartes_action.cartes_action_effet.cartes_action_dogmatiques.croyants.CarteCroyant;
import cartes.divinites.Divinite;
import de.De;
import exceptions.NumberOfPlayersException;
import joueur.Joueur;

/**
 * @author Lallement
 * La classe Partie décrit le comportement d'une partie. Il s'agit de la classe principale du programme
 * La classe sera chargée de lancer un nouvelle partie sur demande.
 */
public class Partie implements Runnable {
	/* ---------- Attributs ---------- */
	/**
	 * Joueurs participant à la partie
	 */
	private ArrayList<Joueur> participants;
	
	/**
	 * Pioche de la partie.
	 */
	private ArrayList<Carte> pioche = CarteAction.getAll();
	
	/**
	 * Cimetiere de la partie
	 */
	private ArrayList<CarteAction> cimetiere = new ArrayList<CarteAction>();
	
	/**
	 * Divinites que les joueurs peuvent incarner
	 */
	private ArrayList<Carte> piocheDivinites = Divinite.getAll();
	
	/**
	 * Gagnant de la partie
	 */
	private Joueur gagnant = null;
	
	/**
	 * Tours de la partie
	 */
	private ArrayList<Tour> tours = new ArrayList<Tour>();
	
	/**
	 * De uitilise lors de la partie
	 */
	private De de = De.getInstance();
	
	/**
	 * Centre de la table
	 */
	private ArrayList<CarteCroyant> centreTable = new ArrayList<CarteCroyant>();
	
	/**
	 * Thread de la partie
	 */
	private Thread t;
	
	/**
	 * Dernier tour durant lequel une carte Apocalypse a ete utilisee
	 */
	private int dernierTourApo;
	
	/**
	 * Dernier joueur ayant utilise une carte apocalypse
	 */
	private Joueur dernierJoueurApo = null;
	
	/**
	 * Dernier joueur ayant lance le De
	 */
	private Joueur dernierLanceur = null;
	
	/* ---------- Constructeurs ---------- */
	/**
	 * Suppression du constructeur publique par defaut
	 */
	private Partie(){}
	
	/**
	 * Constructeur avec argument
	 * @param {int} nbJoueurs : nombre de participants souhaite
	 * @throws NumberOfPlayersException 
	 */
	public Partie(int nbJoueurs) throws NumberOfPlayersException {
		if (nbJoueurs > 6 || nbJoueurs < 2) {
			throw new NumberOfPlayersException();
		} else {
			this.participants = Joueur.getSixParticipants(nbJoueurs, this);
			for (Joueur joueur : this.participants) {
				joueur.distribuerJeu();
				System.out.println(joueur.toString() + "\n -----------------------");
			}
		}
	} 

	/* ---------- Getters & Setters ---------- */	
	/**
	 * Accesseur pour l'attribut participants
	 * @return {ArrayList<Joueur>} participants : retourne un ArrayList contenant les participants de la partie
	 */
	public ArrayList<Joueur> getParticipants() {
		return this.participants;
	}

	/**
	 * Modificateur pour l'attribut participants
	 * @param {ArrayList<Joueur>} participants : ArrayList contenant les participants a attribuer a la partie
	 */
	public void setParticipants(ArrayList<Joueur> participants) {
		this.participants = participants;
	}

	/**
	 * Accesseur pour l'attribut pioche
	 * @return {ArrayList<CarteAction>} pioche : retourne un ArrayList contenant les cartes actions de la pioche
	 */
	public ArrayList<Carte> getPioche() {
		return this.pioche;
	}

	/**
	 * Modificateur pour l'attribut pioche
	 * @param {ArrayList<CarteAction>} pioche : ArrayList contenant les cartes actions a attribuer a la pioche
	 */
	public void setPioche(ArrayList<Carte> pioche) {
		this.pioche = pioche;
	}

	/**
	 * Accesseur pour l'attribut cimetiere
	 * @return {ArrayList<CarteAction>} cimetiere : retourne un ArrayList contenant les cartes ayant ete defaussees
	 */
	public ArrayList<CarteAction> getCimetiere() {
		return this.cimetiere;
	}

	/**
	 * Modificateur pour l'attribut cimetiere
	 * @param {ArrayList<CarteAction>} cimetiere : ArrayList contenant les cartes a attribuer au cimetiere
	 */
	public void setCimetiere(ArrayList<CarteAction> cimetiere) {
		this.cimetiere = cimetiere;
	}

	/**
	 * Accesseur pour l'attribut piocheDivinites
	 * @return {ArrayList<Divinite>} piocheDivinite : retourne un ArrayList contenant les divinites disponibles
	 */
	public ArrayList<Carte> getPiocheDivinites() {
		return this.piocheDivinites;
	}

	/**
	 * Modificateur pour l'attribut piocheDivinites
	 * @param {ArrayList<Divinite>} piocheDivinite : ArrayList contenant les divinites a attribuer a la pioche divinite
	 */
	public void setPiocheDivinites(ArrayList<Divinite> piocheDivinites) {
		this.piocheDivinites = piocheDivinites;
	}

	/**
	 * Accesseur pour l'attribut gagnant
	 * @return {Joueur} gagnant : retourne le gagnant de la partie s'il y en a un
	 */
	public Joueur getGagnant() {
		return this.gagnant;
	}

	/**
	 * Modificateur pour l'attribut gagnant
	 * @param {Joueur} gagnant : joueur ayant gagne la partie
	 */
	public void setGagnant(Joueur gagnant) {
		this.gagnant = gagnant;
	}

	/**
	 * Accesseur pour l'attribut tours
	 * @return {ArrayList<Tour>} tours : retourne un ArrayList contenant les tours d'une partie
	 */
	public ArrayList<Tour> getTours() {
		return this.tours;
	}

	/**
	 * Modificateur pour l'attribut tours
	 * @param {ArrayList<Tour>} tours : ArrayList contenant les tours a attribuer a une partie
	 */
	public void setTours(ArrayList<Tour> tours) {
		this.tours = tours;
	}
	
	/**
	 * Accesseur pour l'attribut de
	 * @return {De} de : retourne l'instance de De utilisee pour la partie
	 */
	public De getDe() {
		return this.de;
	}
	
	/**
	 * Accesseur pour l'attribut dernierTourApo
	 * @return {int} dernierTourApo : numero du dernier tour durant lequel a ete utilise une carte apocalypse
	 */
	public int getDernierTourApo() {
		return this.dernierTourApo;
	}

	/**
	 * Modificateur pour l'attribut dernierTourApo
	 * @param {int} dernierTourApo : numero a attribuer au dernier tour durant lequel a ete utilisee une carte apocalypse
	 */
	public void setDernierTourApo(int dernierTourApo) {
		this.dernierTourApo = dernierTourApo;
	}

	/**
	 * Accesseur pour l'attribut dernierJoueurApo
	 * @return {Joueur} dernierJoueurApo : dernier joueur ayant utilise une carte apocalypse
	 */
	public Joueur getDernierJoueurApo() {
		return this.dernierJoueurApo;
	}

	/**
	 * Modificateur pour l'attribut dernierJoueurApo
	 * @param {Joueur} dernierJoueurApo : dernier joueur ayant utilise une carte apocalypse
	 */
	public void setDernierJoueurApo(Joueur dernierJoueurApo) {
		this.dernierJoueurApo = dernierJoueurApo;
	}

	/**
	 * Accesseur pour l'attribut dernierLanceur
	 * @return {Joueur} dernierLanceur : dernier joueur ayant lance le de
	 */
	public Joueur getDernierLanceur() {
		return this.dernierLanceur;
	}

	/**
	 * Modificateur pour l'attribut dernierLanceur
	 * @param {Joueur} dernierLanceur : dernier joueur ayant lance le de
	 */
	public void setDernierLanceur(Joueur dernierLanceur) {
		this.dernierLanceur = dernierLanceur;
	}
	
	/**
	 * Accesseur pour l'attribut centreTable
	 * @return {ArrayList<CarteCroyant>} centreTable : cartes au centre de la table
	 */
	public ArrayList<CarteCroyant> getCentreTable() {
		return this.centreTable;
	}
	
	/**
	 *Methode permettant d'obtenir un tour anterieur.
	 * @param {int} tour : exemple 0 pour obtenir le tour actuel, 1 pour obtenir le tour precedent 
	 * @return {Tour} : tour precedent
	 */
	public Tour getTourAnt(int tour) {
		return (this.tours.get(0) == null) ? null : this.tours.get(this.tours.size() - (tour + 1));
	}
	
	/***
	 * Methode permettant de connaître le nombre de participants actuel
	 * @return {int} : nombre de participants
	 */
	public int getNombreParticipants() {
		return this.participants.size();
	}
	
	/**
	 * Methode permettant d'obtenir un joueur aleatoire de la partie 
	 * @return {Joueur} : joueur aleatoire de la partie
	 */
	public Joueur getRandomJoueur() {
		return this.participants.get(new Random().nextInt(this.getNombreParticipants()));
	}
	
	
	
	/* ---------- Méthodes ---------- */
	/**
	 * Methode permettant de lancer la partie
	 */
	public void lancerPartie() {
		this.t = new Thread(this);
		this.t.start();
	}
	
	/**
	 * Implémentation de la méthode run
	 * @see Runnable#run()
	 */
	@Override
	public void run() {
		System.out.println("Nouvelle partie lancee!");
		while(this.gagnant == null) {
			if (!Tour.isEnCours()) {
				Tour t = new Tour(this);
				t.lancerTour();
			}
		}
		this.acheverPartie();
	}
	
	/**
	 * Methode permettant de mettre fin a la partie
	 */
	public void acheverPartie() {
		System.out.println("Partie terminee");
		this.t.interrupt();
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			Partie p = new Partie(6);
			p.lancerPartie();
		} catch (NumberOfPlayersException e) {
			e.printStackTrace();
		}
	}
}
