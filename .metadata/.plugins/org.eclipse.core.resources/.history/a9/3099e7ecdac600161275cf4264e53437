package cartes.cartes_action.cartes_action_effet.carte_deus_ex;

import java.util.ArrayList;

import cartes.Carte;
import origine.Origine;
import effets.Effet;

/** 
 * @author Lallement
 * La classe CarteInfluence decrit le comportement general des cartes Influence
 */
public class CarteInfluence extends CarteDeusEx implements Effet {
	
	/* ---------- Attributs ---------- */
	/**
	 * Unique instance de la classe CarteInfluenceJour
	 */
	private String typeInfluence;
	
	/* ---------- Constructeurs ---------- */
	/**
	 * Constructeur par defaut, private afin de supprimer le constructeur par defaut publique
	 * Permet de s'assurer que les informations permettant l'identification d'une carte soient fournies
	 */
	private CarteInfluence(String type) {
		super("Influence " + type);
	}
	
	/**
	 * Constructeur avec argument
	 * @param {Origine} origine : origine à attribuer à la carte nouvellement creee
	 * @param {String} type : chaîne de caractère permettant d'identifier la carte influence
	 */
	public CarteInfluence(Origine origine, String type) {
		super(origine, "Influence" + type);
		this.typeInfluence = type;
	}
	
	/* ---------- Getters & Setters ---------- */
	/**
	 * Accesseur pour l'attribut typeInfluence
	 * @return {String} typeInfluence : retourne une chaîne de caractères permettant d'identifier la carte Influence 
	 */
	public String getTypeInfluence() {
		return this.typeInfluence;
	}

	/**
	 * Modificateur pour l'attribut typeInfluence
	 * @param {String} typeInfluence : type de la carte Influence
	 */
	public void setTypeInfluence(String typeInfluence) {
		this.typeInfluence = typeInfluence;
	}

	/* ---------- Methodes ---------- */
	/**
	 * Implémentation de la methode appliquerEffet
	 * @see effet.Effet#appliquerEffet()
	 */
	@Override
	public void appliquerEffet() {
		switch (this.typeInfluence) {
		case "Jour":
			// TODO appliquer effet pour Influence jour
			break;
		case "Nuit":
			// TODO appliquer effet pour Influence n
			break;
		case "Neant":
			// TODO appliquer effet pour Influence neant
			break;
		default:
			// TODO appliquer effet pour Influence nulle
			break;
		}
	}
	
	/**
	 * Méthode retournant toutes les cartes influence
	 * @return {ArrayList<Carte>} influences : retourne un ArrayList contenant toutes les influences
	 */
	@Override
	public static ArrayList<Carte> getAll() {
		ArrayList<Carte> influences = new ArrayList<Carte>();
		influences.add(new CarteInfluence("Jour"));
		influences.add(new CarteInfluence("Nuit"));
		influences.add(new CarteInfluence("Neant"));
		influences.add(new CarteInfluence("Nulle"));
		influences.add(new CarteInfluence("Nulle"));
		return influences;
	}
	
	/**
	 * Méthode de tests
	 * @param args
	 */
	public static void main(String[] args) {
		ArrayList<CarteInfluence> testInfluence = CarteInfluence.getAllInfluence();
		for (int i = 0; i < testInfluence.size(); i++) {
			System.out.println(testInfluence.get(i).getTypeInfluence());
		}
	}
}
